#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ServerDetails:
  """
  Server status.
  (1) serverHost - Server host.
  (2) serverPort - Server port.
  (3) cpuUsage - Cpu usage percent, 0-100.
  (4) memUsage - Mem usage percent, 0-100.
  (5) availDiskSpace - Available disk space, unit: MB.
  (6) totalDiskSpace - Total disk space, unit: MB.
  (7) activeStreams - Number of streams processing.
  (8) maxStreams - Number of streams can process.

  Attributes:
   - serverHost
   - serverPort
   - cpuUsage
   - memUsage
   - availDiskSpace
   - totalDiskSpace
   - activeStreams
   - maxStreams
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serverHost', None, None, ), # 1
    (2, TType.I32, 'serverPort', None, None, ), # 2
    (3, TType.I32, 'cpuUsage', None, None, ), # 3
    (4, TType.I32, 'memUsage', None, None, ), # 4
    (5, TType.I32, 'availDiskSpace', None, None, ), # 5
    (6, TType.I32, 'totalDiskSpace', None, None, ), # 6
    (7, TType.I32, 'activeStreams', None, None, ), # 7
    (8, TType.I32, 'maxStreams', None, None, ), # 8
  )

  def __init__(self, serverHost=None, serverPort=None, cpuUsage=None, memUsage=None, availDiskSpace=None, totalDiskSpace=None, activeStreams=None, maxStreams=None,):
    self.serverHost = serverHost
    self.serverPort = serverPort
    self.cpuUsage = cpuUsage
    self.memUsage = memUsage
    self.availDiskSpace = availDiskSpace
    self.totalDiskSpace = totalDiskSpace
    self.activeStreams = activeStreams
    self.maxStreams = maxStreams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serverHost = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.serverPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.cpuUsage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.memUsage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.availDiskSpace = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.totalDiskSpace = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.activeStreams = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.maxStreams = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ServerDetails')
    if self.serverHost is not None:
      oprot.writeFieldBegin('serverHost', TType.STRING, 1)
      oprot.writeString(self.serverHost)
      oprot.writeFieldEnd()
    if self.serverPort is not None:
      oprot.writeFieldBegin('serverPort', TType.I32, 2)
      oprot.writeI32(self.serverPort)
      oprot.writeFieldEnd()
    if self.cpuUsage is not None:
      oprot.writeFieldBegin('cpuUsage', TType.I32, 3)
      oprot.writeI32(self.cpuUsage)
      oprot.writeFieldEnd()
    if self.memUsage is not None:
      oprot.writeFieldBegin('memUsage', TType.I32, 4)
      oprot.writeI32(self.memUsage)
      oprot.writeFieldEnd()
    if self.availDiskSpace is not None:
      oprot.writeFieldBegin('availDiskSpace', TType.I32, 5)
      oprot.writeI32(self.availDiskSpace)
      oprot.writeFieldEnd()
    if self.totalDiskSpace is not None:
      oprot.writeFieldBegin('totalDiskSpace', TType.I32, 6)
      oprot.writeI32(self.totalDiskSpace)
      oprot.writeFieldEnd()
    if self.activeStreams is not None:
      oprot.writeFieldBegin('activeStreams', TType.I32, 7)
      oprot.writeI32(self.activeStreams)
      oprot.writeFieldEnd()
    if self.maxStreams is not None:
      oprot.writeFieldBegin('maxStreams', TType.I32, 8)
      oprot.writeI32(self.maxStreams)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
