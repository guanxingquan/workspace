#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Arbiter management communication interface.
  """
  def registerServer(self, serverId, serverType, serverDetails):
    """
    Register server to Arbiter Server.
    (1) serverId - Server ID.
    (2) serverType - Server type.
    (3) serverDetails - Detailed information of the server.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
     - serverType
     - serverDetails
    """
    pass

  def deregisterServer(self, serverId, serverType):
    """
    Deregister server from Arbiter Server.
    (1) serverId - Server ID.
    (2) serverType - Server type.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
     - serverType
    """
    pass

  def sendTaskData(self, deviceId, channel, taskType, stringData, binaryData):
    """
    Sends data generated by a task to Arbiter Server.
    (1) deviceId - Device ID.
    (2) channel - Device channel.
    (3) taskType - Task type.
    (4) stringData - Json formatted string data.
    (5) binaryData - Binary data.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channel
     - taskType
     - stringData
     - binaryData
    """
    pass

  def sendEventData(self, deviceId, channel, eventType, eventTime, stringData, binaryData):
    """
    Sends data generated by an event to Arbiter Server.
    (1) deviceId - Device ID.
    (2) channel - Device channel.
    (3) eventType - Type of the event.
    (4) eventTime - Time of the event.
    (5) stringData - Json formatted string data.
    (6) binaryData - Binary data.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channel
     - eventType
     - eventTime
     - stringData
     - binaryData
    """
    pass

  def getDeviceServer(self, deviceInfo):
    """
    For V4 or lower Nodes.
    Get device server information from arbiter server.
    (1) deviceInfo - device information.
    Return the detailed server information.
    input:  {"device-key":"50:e5:49:b4:e3:21"}
    return: {"device-id":170, server-host":"10.101.10.210", "server-port":10790}
    or
    input:  {"device-id":170}
    return:
    {"device-key":"50:e5:49:b4:e3:21:", server-host":"10.101.10.210", "server-port":10790}

    Parameters:
     - deviceInfo
    """
    pass


class Client(Iface):
  """
  Arbiter management communication interface.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def registerServer(self, serverId, serverType, serverDetails):
    """
    Register server to Arbiter Server.
    (1) serverId - Server ID.
    (2) serverType - Server type.
    (3) serverDetails - Detailed information of the server.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
     - serverType
     - serverDetails
    """
    self.send_registerServer(serverId, serverType, serverDetails)
    return self.recv_registerServer()

  def send_registerServer(self, serverId, serverType, serverDetails):
    self._oprot.writeMessageBegin('registerServer', TMessageType.CALL, self._seqid)
    args = registerServer_args()
    args.serverId = serverId
    args.serverType = serverType
    args.serverDetails = serverDetails
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = registerServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "registerServer failed: unknown result");

  def deregisterServer(self, serverId, serverType):
    """
    Deregister server from Arbiter Server.
    (1) serverId - Server ID.
    (2) serverType - Server type.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - serverId
     - serverType
    """
    self.send_deregisterServer(serverId, serverType)
    return self.recv_deregisterServer()

  def send_deregisterServer(self, serverId, serverType):
    self._oprot.writeMessageBegin('deregisterServer', TMessageType.CALL, self._seqid)
    args = deregisterServer_args()
    args.serverId = serverId
    args.serverType = serverType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deregisterServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deregisterServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deregisterServer failed: unknown result");

  def sendTaskData(self, deviceId, channel, taskType, stringData, binaryData):
    """
    Sends data generated by a task to Arbiter Server.
    (1) deviceId - Device ID.
    (2) channel - Device channel.
    (3) taskType - Task type.
    (4) stringData - Json formatted string data.
    (5) binaryData - Binary data.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channel
     - taskType
     - stringData
     - binaryData
    """
    self.send_sendTaskData(deviceId, channel, taskType, stringData, binaryData)
    return self.recv_sendTaskData()

  def send_sendTaskData(self, deviceId, channel, taskType, stringData, binaryData):
    self._oprot.writeMessageBegin('sendTaskData', TMessageType.CALL, self._seqid)
    args = sendTaskData_args()
    args.deviceId = deviceId
    args.channel = channel
    args.taskType = taskType
    args.stringData = stringData
    args.binaryData = binaryData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendTaskData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendTaskData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendTaskData failed: unknown result");

  def sendEventData(self, deviceId, channel, eventType, eventTime, stringData, binaryData):
    """
    Sends data generated by an event to Arbiter Server.
    (1) deviceId - Device ID.
    (2) channel - Device channel.
    (3) eventType - Type of the event.
    (4) eventTime - Time of the event.
    (5) stringData - Json formatted string data.
    (6) binaryData - Binary data.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channel
     - eventType
     - eventTime
     - stringData
     - binaryData
    """
    self.send_sendEventData(deviceId, channel, eventType, eventTime, stringData, binaryData)
    return self.recv_sendEventData()

  def send_sendEventData(self, deviceId, channel, eventType, eventTime, stringData, binaryData):
    self._oprot.writeMessageBegin('sendEventData', TMessageType.CALL, self._seqid)
    args = sendEventData_args()
    args.deviceId = deviceId
    args.channel = channel
    args.eventType = eventType
    args.eventTime = eventTime
    args.stringData = stringData
    args.binaryData = binaryData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_sendEventData(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = sendEventData_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "sendEventData failed: unknown result");

  def getDeviceServer(self, deviceInfo):
    """
    For V4 or lower Nodes.
    Get device server information from arbiter server.
    (1) deviceInfo - device information.
    Return the detailed server information.
    input:  {"device-key":"50:e5:49:b4:e3:21"}
    return: {"device-id":170, server-host":"10.101.10.210", "server-port":10790}
    or
    input:  {"device-id":170}
    return:
    {"device-key":"50:e5:49:b4:e3:21:", server-host":"10.101.10.210", "server-port":10790}

    Parameters:
     - deviceInfo
    """
    self.send_getDeviceServer(deviceInfo)
    return self.recv_getDeviceServer()

  def send_getDeviceServer(self, deviceInfo):
    self._oprot.writeMessageBegin('getDeviceServer', TMessageType.CALL, self._seqid)
    args = getDeviceServer_args()
    args.deviceInfo = deviceInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDeviceServer(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getDeviceServer_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDeviceServer failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["registerServer"] = Processor.process_registerServer
    self._processMap["deregisterServer"] = Processor.process_deregisterServer
    self._processMap["sendTaskData"] = Processor.process_sendTaskData
    self._processMap["sendEventData"] = Processor.process_sendEventData
    self._processMap["getDeviceServer"] = Processor.process_getDeviceServer

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_registerServer(self, seqid, iprot, oprot):
    args = registerServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerServer_result()
    result.success = self._handler.registerServer(args.serverId, args.serverType, args.serverDetails)
    oprot.writeMessageBegin("registerServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deregisterServer(self, seqid, iprot, oprot):
    args = deregisterServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deregisterServer_result()
    result.success = self._handler.deregisterServer(args.serverId, args.serverType)
    oprot.writeMessageBegin("deregisterServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendTaskData(self, seqid, iprot, oprot):
    args = sendTaskData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendTaskData_result()
    result.success = self._handler.sendTaskData(args.deviceId, args.channel, args.taskType, args.stringData, args.binaryData)
    oprot.writeMessageBegin("sendTaskData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_sendEventData(self, seqid, iprot, oprot):
    args = sendEventData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = sendEventData_result()
    result.success = self._handler.sendEventData(args.deviceId, args.channel, args.eventType, args.eventTime, args.stringData, args.binaryData)
    oprot.writeMessageBegin("sendEventData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDeviceServer(self, seqid, iprot, oprot):
    args = getDeviceServer_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDeviceServer_result()
    result.success = self._handler.getDeviceServer(args.deviceInfo)
    oprot.writeMessageBegin("getDeviceServer", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class registerServer_args:
  """
  Attributes:
   - serverId
   - serverType
   - serverDetails
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'serverType', None, None, ), # 2
    (3, TType.STRUCT, 'serverDetails', (ServerDetails, ServerDetails.thrift_spec), None, ), # 3
  )

  def __init__(self, serverId=None, serverType=None, serverDetails=None,):
    self.serverId = serverId
    self.serverType = serverType
    self.serverDetails = serverDetails

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.serverId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.serverDetails = ServerDetails()
          self.serverDetails.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerServer_args')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.I64, 1)
      oprot.writeI64(self.serverId)
      oprot.writeFieldEnd()
    if self.serverType is not None:
      oprot.writeFieldBegin('serverType', TType.STRING, 2)
      oprot.writeString(self.serverType)
      oprot.writeFieldEnd()
    if self.serverDetails is not None:
      oprot.writeFieldBegin('serverDetails', TType.STRUCT, 3)
      self.serverDetails.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerServer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deregisterServer_args:
  """
  Attributes:
   - serverId
   - serverType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'serverId', None, None, ), # 1
    (2, TType.STRING, 'serverType', None, None, ), # 2
  )

  def __init__(self, serverId=None, serverType=None,):
    self.serverId = serverId
    self.serverType = serverType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.serverId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serverType = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deregisterServer_args')
    if self.serverId is not None:
      oprot.writeFieldBegin('serverId', TType.I64, 1)
      oprot.writeI64(self.serverId)
      oprot.writeFieldEnd()
    if self.serverType is not None:
      oprot.writeFieldBegin('serverType', TType.STRING, 2)
      oprot.writeString(self.serverType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deregisterServer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deregisterServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendTaskData_args:
  """
  Attributes:
   - deviceId
   - channel
   - taskType
   - stringData
   - binaryData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channel', None, None, ), # 2
    (3, TType.STRING, 'taskType', None, None, ), # 3
    (4, TType.STRING, 'stringData', None, None, ), # 4
    (5, TType.STRING, 'binaryData', None, None, ), # 5
  )

  def __init__(self, deviceId=None, channel=None, taskType=None, stringData=None, binaryData=None,):
    self.deviceId = deviceId
    self.channel = channel
    self.taskType = taskType
    self.stringData = stringData
    self.binaryData = binaryData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.taskType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.stringData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.binaryData = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendTaskData_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 2)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.taskType is not None:
      oprot.writeFieldBegin('taskType', TType.STRING, 3)
      oprot.writeString(self.taskType)
      oprot.writeFieldEnd()
    if self.stringData is not None:
      oprot.writeFieldBegin('stringData', TType.STRING, 4)
      oprot.writeString(self.stringData)
      oprot.writeFieldEnd()
    if self.binaryData is not None:
      oprot.writeFieldBegin('binaryData', TType.STRING, 5)
      oprot.writeString(self.binaryData)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendTaskData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendTaskData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendEventData_args:
  """
  Attributes:
   - deviceId
   - channel
   - eventType
   - eventTime
   - stringData
   - binaryData
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channel', None, None, ), # 2
    (3, TType.STRING, 'eventType', None, None, ), # 3
    (4, TType.I64, 'eventTime', None, None, ), # 4
    (5, TType.STRING, 'stringData', None, None, ), # 5
    (6, TType.STRING, 'binaryData', None, None, ), # 6
  )

  def __init__(self, deviceId=None, channel=None, eventType=None, eventTime=None, stringData=None, binaryData=None,):
    self.deviceId = deviceId
    self.channel = channel
    self.eventType = eventType
    self.eventTime = eventTime
    self.stringData = stringData
    self.binaryData = binaryData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.eventType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.eventTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.stringData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.binaryData = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendEventData_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 2)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.eventType is not None:
      oprot.writeFieldBegin('eventType', TType.STRING, 3)
      oprot.writeString(self.eventType)
      oprot.writeFieldEnd()
    if self.eventTime is not None:
      oprot.writeFieldBegin('eventTime', TType.I64, 4)
      oprot.writeI64(self.eventTime)
      oprot.writeFieldEnd()
    if self.stringData is not None:
      oprot.writeFieldBegin('stringData', TType.STRING, 5)
      oprot.writeString(self.stringData)
      oprot.writeFieldEnd()
    if self.binaryData is not None:
      oprot.writeFieldBegin('binaryData', TType.STRING, 6)
      oprot.writeString(self.binaryData)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class sendEventData_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('sendEventData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDeviceServer_args:
  """
  Attributes:
   - deviceInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'deviceInfo', None, None, ), # 1
  )

  def __init__(self, deviceInfo=None,):
    self.deviceInfo = deviceInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.deviceInfo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDeviceServer_args')
    if self.deviceInfo is not None:
      oprot.writeFieldBegin('deviceInfo', TType.STRING, 1)
      oprot.writeString(self.deviceInfo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDeviceServer_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDeviceServer_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
