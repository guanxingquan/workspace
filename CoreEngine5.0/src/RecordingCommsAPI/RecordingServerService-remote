#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import RecordingServerService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i64 getServerID()'
  print '  bool setGlobalConfiguration(string configurations)'
  print '  bool setDeviceConfiguration(i64 deviceId, i32 channel, string configurations)'
  print '  bool setDeviceSnapshot(i64 deviceId, i32 channel, string snapshot)'
  print '  bool startRecordingTask(i64 deviceId, i32 channel, string mediaType, string streamProfile)'
  print '  bool stopRecordingTask(i64 deviceId, i32 channel, string mediaType)'
  print '  bool terminateRecordingTask(i64 deviceId)'
  print '   getRecordingDetails(i64 deviceId, i32 channel, string deviceKey, string mediaType, string beginTime, string endTime)'
  print '  bool triggerEventRecording(i64 deviceId, i32 channel, string mediaType, string eventId, i32 duration)'
  print '  string getEventRecording(i64 deviceId, i32 channel, string mediaType, string eventId)'
  print '  bool triggerSpecifiedRecording(i64 deviceId, i32 channel, string mediaType, string beginTime, string endTime)'
  print '  string getSpecifiedRecording(i64 deviceId, i32 channel, string mediaType, string beginTime, string endTime)'
  print '   startRecordingUpload(i64 deviceId, i32 channel, string mediaType, string beginTime, string endTime)'
  print '  bool stopRecordingUpload(i64 deviceId, i32 channel, string mediaType,  fileTime)'
  print '   getStreamStatus( streamFileDetails)'
  print '  bool removeMediaFile(i64 deviceId, i32 channel, string mediaType, string mediaInfo)'
  print '   getStorageStatus()'
  print '  string getRecordingServerReport(i64 deviceId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = RecordingServerService.Client(protocol)
transport.open()

if cmd == 'getServerID':
  if len(args) != 0:
    print 'getServerID requires 0 args'
    sys.exit(1)
  pp.pprint(client.getServerID())

elif cmd == 'setGlobalConfiguration':
  if len(args) != 1:
    print 'setGlobalConfiguration requires 1 args'
    sys.exit(1)
  pp.pprint(client.setGlobalConfiguration(args[0],))

elif cmd == 'setDeviceConfiguration':
  if len(args) != 3:
    print 'setDeviceConfiguration requires 3 args'
    sys.exit(1)
  pp.pprint(client.setDeviceConfiguration(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'setDeviceSnapshot':
  if len(args) != 3:
    print 'setDeviceSnapshot requires 3 args'
    sys.exit(1)
  pp.pprint(client.setDeviceSnapshot(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'startRecordingTask':
  if len(args) != 4:
    print 'startRecordingTask requires 4 args'
    sys.exit(1)
  pp.pprint(client.startRecordingTask(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'stopRecordingTask':
  if len(args) != 3:
    print 'stopRecordingTask requires 3 args'
    sys.exit(1)
  pp.pprint(client.stopRecordingTask(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'terminateRecordingTask':
  if len(args) != 1:
    print 'terminateRecordingTask requires 1 args'
    sys.exit(1)
  pp.pprint(client.terminateRecordingTask(eval(args[0]),))

elif cmd == 'getRecordingDetails':
  if len(args) != 6:
    print 'getRecordingDetails requires 6 args'
    sys.exit(1)
  pp.pprint(client.getRecordingDetails(eval(args[0]),eval(args[1]),args[2],args[3],args[4],args[5],))

elif cmd == 'triggerEventRecording':
  if len(args) != 5:
    print 'triggerEventRecording requires 5 args'
    sys.exit(1)
  pp.pprint(client.triggerEventRecording(eval(args[0]),eval(args[1]),args[2],args[3],eval(args[4]),))

elif cmd == 'getEventRecording':
  if len(args) != 4:
    print 'getEventRecording requires 4 args'
    sys.exit(1)
  pp.pprint(client.getEventRecording(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'triggerSpecifiedRecording':
  if len(args) != 5:
    print 'triggerSpecifiedRecording requires 5 args'
    sys.exit(1)
  pp.pprint(client.triggerSpecifiedRecording(eval(args[0]),eval(args[1]),args[2],args[3],args[4],))

elif cmd == 'getSpecifiedRecording':
  if len(args) != 5:
    print 'getSpecifiedRecording requires 5 args'
    sys.exit(1)
  pp.pprint(client.getSpecifiedRecording(eval(args[0]),eval(args[1]),args[2],args[3],args[4],))

elif cmd == 'startRecordingUpload':
  if len(args) != 5:
    print 'startRecordingUpload requires 5 args'
    sys.exit(1)
  pp.pprint(client.startRecordingUpload(eval(args[0]),eval(args[1]),args[2],args[3],args[4],))

elif cmd == 'stopRecordingUpload':
  if len(args) != 4:
    print 'stopRecordingUpload requires 4 args'
    sys.exit(1)
  pp.pprint(client.stopRecordingUpload(eval(args[0]),eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'getStreamStatus':
  if len(args) != 1:
    print 'getStreamStatus requires 1 args'
    sys.exit(1)
  pp.pprint(client.getStreamStatus(eval(args[0]),))

elif cmd == 'removeMediaFile':
  if len(args) != 4:
    print 'removeMediaFile requires 4 args'
    sys.exit(1)
  pp.pprint(client.removeMediaFile(eval(args[0]),eval(args[1]),args[2],args[3],))

elif cmd == 'getStorageStatus':
  if len(args) != 0:
    print 'getStorageStatus requires 0 args'
    sys.exit(1)
  pp.pprint(client.getStorageStatus())

elif cmd == 'getRecordingServerReport':
  if len(args) != 1:
    print 'getRecordingServerReport requires 1 args'
    sys.exit(1)
  pp.pprint(client.getRecordingServerReport(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
