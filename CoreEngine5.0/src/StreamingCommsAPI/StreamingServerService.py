#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Streaming Server interface.
  """
  def getServerID(self, ):
    """
    Get the id of this streaming server.
    """
    pass

  def setDeviceSnapshot(self, deviceId, channel, snapshot):
    """
    Set device snapshot for streaming.
    (1) deviceId - Device ID.
    (2) channel - Device channel.
    (3) snapshot - Snapshot buffer.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channel
     - snapshot
    """
    pass

  def startLiveviewStreamSession(self, sessionId, deviceId, channel, protocolType, mediaType, streamProfile):
    """
    Start a stream session.
    (1) sessionId - Unique string of a session request.
    (2) deviceId - Device ID.
    (3) channel - The requested channel index.
    (4) protocolType - The protocol type, can be "http"/"rtsp"/"rtmp".
    (5) mediaType - Recording media type, can be "video"/"audio"/"image".
    (6) streamProfile - Detailed device stream related parameters.
    RETURN value is a list of the dynamically generated URLs.

    Parameters:
     - sessionId
     - deviceId
     - channel
     - protocolType
     - mediaType
     - streamProfile
    """
    pass

  def stopLiveviewStreamSession(self, sessionId):
    """
    Stop a liveview stream session.
    (1) sessionId - Unique string of a session request.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
    """
    pass

  def startPlaybackStreamSession(self, sessionId, deviceId, channel, protocolType, mediaType, action, mediaFiles):
    """
    Stop a stream session.
    (1) sessionId - Unique string of a session request.
    (2) deviceId - Device ID.
    (3) channel - Device Channel.
    (4) protocolType - The protocol type, can be "http"/"rtsp"/"rtmp".
    (5) mediaType - Recording media type, can be "video"/"audio"/"image".
    (6) action - Action, can be "play"/"download".
    (7) mediaFiles - Detailed file list.
    RETURN value is a list of the dynamically generated URLs.

    Parameters:
     - sessionId
     - deviceId
     - channel
     - protocolType
     - mediaType
     - action
     - mediaFiles
    """
    pass

  def stopPlaybackStreamSession(self, sessionId):
    """
    Stop a playback stream session.
    (1) sessionId - Unique string of a session request.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
    """
    pass

  def setSessionAccessControl(self, sessionId, ttl, allowedClientIpAddresses):
    """
    Set access control for a session, only accept connections for streaming from specified ip list.
    If this interface not called, the session is avaiable for all.
    (1) sessionId - Handle for this session for future reference.
    (2) ttl - UTC time stamp when this session becomes invalid, unit: second.
    (3) allowedClientIpAddresses - list of IP address can connect for streaming of this session.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
     - ttl
     - allowedClientIpAddresses
    """
    pass

  def getStreamClients(self, sessionId):
    """
    Return media session clients.
    (1) sessionId - Unique string of a session request.
    RETURN json formated stream client details list, or empty list if not found, example of the json string:
                     {"ip":"223.4.134.189","port":52168}

    Parameters:
     - sessionId
    """
    pass

  def getStreamingServerReport(self, deviceId):
    """
    Get streaming server report for diagnosis.
    (1) deviceId - Device ID.
    If deviceId is 0, return the general report,
    else return the device specified report.
    RETURN json formatted streaming server report.

    Parameters:
     - deviceId
    """
    pass


class Client(Iface):
  """
  Streaming Server interface.
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getServerID(self, ):
    """
    Get the id of this streaming server.
    """
    self.send_getServerID()
    return self.recv_getServerID()

  def send_getServerID(self, ):
    self._oprot.writeMessageBegin('getServerID', TMessageType.CALL, self._seqid)
    args = getServerID_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getServerID(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getServerID_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getServerID failed: unknown result");

  def setDeviceSnapshot(self, deviceId, channel, snapshot):
    """
    Set device snapshot for streaming.
    (1) deviceId - Device ID.
    (2) channel - Device channel.
    (3) snapshot - Snapshot buffer.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - deviceId
     - channel
     - snapshot
    """
    self.send_setDeviceSnapshot(deviceId, channel, snapshot)
    return self.recv_setDeviceSnapshot()

  def send_setDeviceSnapshot(self, deviceId, channel, snapshot):
    self._oprot.writeMessageBegin('setDeviceSnapshot', TMessageType.CALL, self._seqid)
    args = setDeviceSnapshot_args()
    args.deviceId = deviceId
    args.channel = channel
    args.snapshot = snapshot
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setDeviceSnapshot(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setDeviceSnapshot_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setDeviceSnapshot failed: unknown result");

  def startLiveviewStreamSession(self, sessionId, deviceId, channel, protocolType, mediaType, streamProfile):
    """
    Start a stream session.
    (1) sessionId - Unique string of a session request.
    (2) deviceId - Device ID.
    (3) channel - The requested channel index.
    (4) protocolType - The protocol type, can be "http"/"rtsp"/"rtmp".
    (5) mediaType - Recording media type, can be "video"/"audio"/"image".
    (6) streamProfile - Detailed device stream related parameters.
    RETURN value is a list of the dynamically generated URLs.

    Parameters:
     - sessionId
     - deviceId
     - channel
     - protocolType
     - mediaType
     - streamProfile
    """
    self.send_startLiveviewStreamSession(sessionId, deviceId, channel, protocolType, mediaType, streamProfile)
    return self.recv_startLiveviewStreamSession()

  def send_startLiveviewStreamSession(self, sessionId, deviceId, channel, protocolType, mediaType, streamProfile):
    self._oprot.writeMessageBegin('startLiveviewStreamSession', TMessageType.CALL, self._seqid)
    args = startLiveviewStreamSession_args()
    args.sessionId = sessionId
    args.deviceId = deviceId
    args.channel = channel
    args.protocolType = protocolType
    args.mediaType = mediaType
    args.streamProfile = streamProfile
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_startLiveviewStreamSession(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = startLiveviewStreamSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "startLiveviewStreamSession failed: unknown result");

  def stopLiveviewStreamSession(self, sessionId):
    """
    Stop a liveview stream session.
    (1) sessionId - Unique string of a session request.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
    """
    self.send_stopLiveviewStreamSession(sessionId)
    return self.recv_stopLiveviewStreamSession()

  def send_stopLiveviewStreamSession(self, sessionId):
    self._oprot.writeMessageBegin('stopLiveviewStreamSession', TMessageType.CALL, self._seqid)
    args = stopLiveviewStreamSession_args()
    args.sessionId = sessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopLiveviewStreamSession(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopLiveviewStreamSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stopLiveviewStreamSession failed: unknown result");

  def startPlaybackStreamSession(self, sessionId, deviceId, channel, protocolType, mediaType, action, mediaFiles):
    """
    Stop a stream session.
    (1) sessionId - Unique string of a session request.
    (2) deviceId - Device ID.
    (3) channel - Device Channel.
    (4) protocolType - The protocol type, can be "http"/"rtsp"/"rtmp".
    (5) mediaType - Recording media type, can be "video"/"audio"/"image".
    (6) action - Action, can be "play"/"download".
    (7) mediaFiles - Detailed file list.
    RETURN value is a list of the dynamically generated URLs.

    Parameters:
     - sessionId
     - deviceId
     - channel
     - protocolType
     - mediaType
     - action
     - mediaFiles
    """
    self.send_startPlaybackStreamSession(sessionId, deviceId, channel, protocolType, mediaType, action, mediaFiles)
    return self.recv_startPlaybackStreamSession()

  def send_startPlaybackStreamSession(self, sessionId, deviceId, channel, protocolType, mediaType, action, mediaFiles):
    self._oprot.writeMessageBegin('startPlaybackStreamSession', TMessageType.CALL, self._seqid)
    args = startPlaybackStreamSession_args()
    args.sessionId = sessionId
    args.deviceId = deviceId
    args.channel = channel
    args.protocolType = protocolType
    args.mediaType = mediaType
    args.action = action
    args.mediaFiles = mediaFiles
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_startPlaybackStreamSession(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = startPlaybackStreamSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "startPlaybackStreamSession failed: unknown result");

  def stopPlaybackStreamSession(self, sessionId):
    """
    Stop a playback stream session.
    (1) sessionId - Unique string of a session request.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
    """
    self.send_stopPlaybackStreamSession(sessionId)
    return self.recv_stopPlaybackStreamSession()

  def send_stopPlaybackStreamSession(self, sessionId):
    self._oprot.writeMessageBegin('stopPlaybackStreamSession', TMessageType.CALL, self._seqid)
    args = stopPlaybackStreamSession_args()
    args.sessionId = sessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_stopPlaybackStreamSession(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = stopPlaybackStreamSession_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "stopPlaybackStreamSession failed: unknown result");

  def setSessionAccessControl(self, sessionId, ttl, allowedClientIpAddresses):
    """
    Set access control for a session, only accept connections for streaming from specified ip list.
    If this interface not called, the session is avaiable for all.
    (1) sessionId - Handle for this session for future reference.
    (2) ttl - UTC time stamp when this session becomes invalid, unit: second.
    (3) allowedClientIpAddresses - list of IP address can connect for streaming of this session.
    RETURN true if the operation succeed, false if fail.

    Parameters:
     - sessionId
     - ttl
     - allowedClientIpAddresses
    """
    self.send_setSessionAccessControl(sessionId, ttl, allowedClientIpAddresses)
    return self.recv_setSessionAccessControl()

  def send_setSessionAccessControl(self, sessionId, ttl, allowedClientIpAddresses):
    self._oprot.writeMessageBegin('setSessionAccessControl', TMessageType.CALL, self._seqid)
    args = setSessionAccessControl_args()
    args.sessionId = sessionId
    args.ttl = ttl
    args.allowedClientIpAddresses = allowedClientIpAddresses
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setSessionAccessControl(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setSessionAccessControl_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setSessionAccessControl failed: unknown result");

  def getStreamClients(self, sessionId):
    """
    Return media session clients.
    (1) sessionId - Unique string of a session request.
    RETURN json formated stream client details list, or empty list if not found, example of the json string:
                     {"ip":"223.4.134.189","port":52168}

    Parameters:
     - sessionId
    """
    self.send_getStreamClients(sessionId)
    return self.recv_getStreamClients()

  def send_getStreamClients(self, sessionId):
    self._oprot.writeMessageBegin('getStreamClients', TMessageType.CALL, self._seqid)
    args = getStreamClients_args()
    args.sessionId = sessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStreamClients(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStreamClients_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStreamClients failed: unknown result");

  def getStreamingServerReport(self, deviceId):
    """
    Get streaming server report for diagnosis.
    (1) deviceId - Device ID.
    If deviceId is 0, return the general report,
    else return the device specified report.
    RETURN json formatted streaming server report.

    Parameters:
     - deviceId
    """
    self.send_getStreamingServerReport(deviceId)
    return self.recv_getStreamingServerReport()

  def send_getStreamingServerReport(self, deviceId):
    self._oprot.writeMessageBegin('getStreamingServerReport', TMessageType.CALL, self._seqid)
    args = getStreamingServerReport_args()
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getStreamingServerReport(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getStreamingServerReport_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getStreamingServerReport failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getServerID"] = Processor.process_getServerID
    self._processMap["setDeviceSnapshot"] = Processor.process_setDeviceSnapshot
    self._processMap["startLiveviewStreamSession"] = Processor.process_startLiveviewStreamSession
    self._processMap["stopLiveviewStreamSession"] = Processor.process_stopLiveviewStreamSession
    self._processMap["startPlaybackStreamSession"] = Processor.process_startPlaybackStreamSession
    self._processMap["stopPlaybackStreamSession"] = Processor.process_stopPlaybackStreamSession
    self._processMap["setSessionAccessControl"] = Processor.process_setSessionAccessControl
    self._processMap["getStreamClients"] = Processor.process_getStreamClients
    self._processMap["getStreamingServerReport"] = Processor.process_getStreamingServerReport

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getServerID(self, seqid, iprot, oprot):
    args = getServerID_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getServerID_result()
    result.success = self._handler.getServerID()
    oprot.writeMessageBegin("getServerID", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setDeviceSnapshot(self, seqid, iprot, oprot):
    args = setDeviceSnapshot_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setDeviceSnapshot_result()
    result.success = self._handler.setDeviceSnapshot(args.deviceId, args.channel, args.snapshot)
    oprot.writeMessageBegin("setDeviceSnapshot", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_startLiveviewStreamSession(self, seqid, iprot, oprot):
    args = startLiveviewStreamSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = startLiveviewStreamSession_result()
    result.success = self._handler.startLiveviewStreamSession(args.sessionId, args.deviceId, args.channel, args.protocolType, args.mediaType, args.streamProfile)
    oprot.writeMessageBegin("startLiveviewStreamSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopLiveviewStreamSession(self, seqid, iprot, oprot):
    args = stopLiveviewStreamSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopLiveviewStreamSession_result()
    result.success = self._handler.stopLiveviewStreamSession(args.sessionId)
    oprot.writeMessageBegin("stopLiveviewStreamSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_startPlaybackStreamSession(self, seqid, iprot, oprot):
    args = startPlaybackStreamSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = startPlaybackStreamSession_result()
    result.success = self._handler.startPlaybackStreamSession(args.sessionId, args.deviceId, args.channel, args.protocolType, args.mediaType, args.action, args.mediaFiles)
    oprot.writeMessageBegin("startPlaybackStreamSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_stopPlaybackStreamSession(self, seqid, iprot, oprot):
    args = stopPlaybackStreamSession_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = stopPlaybackStreamSession_result()
    result.success = self._handler.stopPlaybackStreamSession(args.sessionId)
    oprot.writeMessageBegin("stopPlaybackStreamSession", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setSessionAccessControl(self, seqid, iprot, oprot):
    args = setSessionAccessControl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setSessionAccessControl_result()
    result.success = self._handler.setSessionAccessControl(args.sessionId, args.ttl, args.allowedClientIpAddresses)
    oprot.writeMessageBegin("setSessionAccessControl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getStreamClients(self, seqid, iprot, oprot):
    args = getStreamClients_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStreamClients_result()
    result.success = self._handler.getStreamClients(args.sessionId)
    oprot.writeMessageBegin("getStreamClients", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getStreamingServerReport(self, seqid, iprot, oprot):
    args = getStreamingServerReport_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getStreamingServerReport_result()
    result.success = self._handler.getStreamingServerReport(args.deviceId)
    oprot.writeMessageBegin("getStreamingServerReport", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getServerID_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerID_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getServerID_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getServerID_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setDeviceSnapshot_args:
  """
  Attributes:
   - deviceId
   - channel
   - snapshot
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
    (2, TType.I32, 'channel', None, None, ), # 2
    (3, TType.STRING, 'snapshot', None, None, ), # 3
  )

  def __init__(self, deviceId=None, channel=None, snapshot=None,):
    self.deviceId = deviceId
    self.channel = channel
    self.snapshot = snapshot

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.snapshot = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setDeviceSnapshot_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 2)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.snapshot is not None:
      oprot.writeFieldBegin('snapshot', TType.STRING, 3)
      oprot.writeString(self.snapshot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setDeviceSnapshot_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setDeviceSnapshot_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startLiveviewStreamSession_args:
  """
  Attributes:
   - sessionId
   - deviceId
   - channel
   - protocolType
   - mediaType
   - streamProfile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.I64, 'deviceId', None, None, ), # 2
    (3, TType.I32, 'channel', None, None, ), # 3
    (4, TType.STRING, 'protocolType', None, None, ), # 4
    (5, TType.STRING, 'mediaType', None, None, ), # 5
    (6, TType.STRING, 'streamProfile', None, None, ), # 6
  )

  def __init__(self, sessionId=None, deviceId=None, channel=None, protocolType=None, mediaType=None, streamProfile=None,):
    self.sessionId = sessionId
    self.deviceId = deviceId
    self.channel = channel
    self.protocolType = protocolType
    self.mediaType = mediaType
    self.streamProfile = streamProfile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.protocolType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mediaType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.streamProfile = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startLiveviewStreamSession_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 2)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 3)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.protocolType is not None:
      oprot.writeFieldBegin('protocolType', TType.STRING, 4)
      oprot.writeString(self.protocolType)
      oprot.writeFieldEnd()
    if self.mediaType is not None:
      oprot.writeFieldBegin('mediaType', TType.STRING, 5)
      oprot.writeString(self.mediaType)
      oprot.writeFieldEnd()
    if self.streamProfile is not None:
      oprot.writeFieldBegin('streamProfile', TType.STRING, 6)
      oprot.writeString(self.streamProfile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startLiveviewStreamSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startLiveviewStreamSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter6 in self.success:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopLiveviewStreamSession_args:
  """
  Attributes:
   - sessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
  )

  def __init__(self, sessionId=None,):
    self.sessionId = sessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopLiveviewStreamSession_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopLiveviewStreamSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopLiveviewStreamSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startPlaybackStreamSession_args:
  """
  Attributes:
   - sessionId
   - deviceId
   - channel
   - protocolType
   - mediaType
   - action
   - mediaFiles
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.I64, 'deviceId', None, None, ), # 2
    (3, TType.I32, 'channel', None, None, ), # 3
    (4, TType.STRING, 'protocolType', None, None, ), # 4
    (5, TType.STRING, 'mediaType', None, None, ), # 5
    (6, TType.STRING, 'action', None, None, ), # 6
    (7, TType.LIST, 'mediaFiles', (TType.STRUCT,(CommStructures.ttypes.StreamFileDetails, CommStructures.ttypes.StreamFileDetails.thrift_spec)), None, ), # 7
  )

  def __init__(self, sessionId=None, deviceId=None, channel=None, protocolType=None, mediaType=None, action=None, mediaFiles=None,):
    self.sessionId = sessionId
    self.deviceId = deviceId
    self.channel = channel
    self.protocolType = protocolType
    self.mediaType = mediaType
    self.action = action
    self.mediaFiles = mediaFiles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.channel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.protocolType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mediaType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.action = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.mediaFiles = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = CommStructures.ttypes.StreamFileDetails()
            _elem12.read(iprot)
            self.mediaFiles.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startPlaybackStreamSession_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 2)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    if self.channel is not None:
      oprot.writeFieldBegin('channel', TType.I32, 3)
      oprot.writeI32(self.channel)
      oprot.writeFieldEnd()
    if self.protocolType is not None:
      oprot.writeFieldBegin('protocolType', TType.STRING, 4)
      oprot.writeString(self.protocolType)
      oprot.writeFieldEnd()
    if self.mediaType is not None:
      oprot.writeFieldBegin('mediaType', TType.STRING, 5)
      oprot.writeString(self.mediaType)
      oprot.writeFieldEnd()
    if self.action is not None:
      oprot.writeFieldBegin('action', TType.STRING, 6)
      oprot.writeString(self.action)
      oprot.writeFieldEnd()
    if self.mediaFiles is not None:
      oprot.writeFieldBegin('mediaFiles', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.mediaFiles))
      for iter13 in self.mediaFiles:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class startPlaybackStreamSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readString();
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('startPlaybackStreamSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter20 in self.success:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopPlaybackStreamSession_args:
  """
  Attributes:
   - sessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
  )

  def __init__(self, sessionId=None,):
    self.sessionId = sessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopPlaybackStreamSession_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class stopPlaybackStreamSession_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('stopPlaybackStreamSession_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSessionAccessControl_args:
  """
  Attributes:
   - sessionId
   - ttl
   - allowedClientIpAddresses
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.I64, 'ttl', None, None, ), # 2
    (3, TType.LIST, 'allowedClientIpAddresses', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, sessionId=None, ttl=None, allowedClientIpAddresses=None,):
    self.sessionId = sessionId
    self.ttl = ttl
    self.allowedClientIpAddresses = allowedClientIpAddresses

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.ttl = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.allowedClientIpAddresses = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.allowedClientIpAddresses.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSessionAccessControl_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.ttl is not None:
      oprot.writeFieldBegin('ttl', TType.I64, 2)
      oprot.writeI64(self.ttl)
      oprot.writeFieldEnd()
    if self.allowedClientIpAddresses is not None:
      oprot.writeFieldBegin('allowedClientIpAddresses', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.allowedClientIpAddresses))
      for iter27 in self.allowedClientIpAddresses:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSessionAccessControl_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSessionAccessControl_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamClients_args:
  """
  Attributes:
   - sessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
  )

  def __init__(self, sessionId=None,):
    self.sessionId = sessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamClients_args')
    if self.sessionId is not None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamClients_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readString();
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamClients_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter34 in self.success:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamingServerReport_args:
  """
  Attributes:
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'deviceId', None, None, ), # 1
  )

  def __init__(self, deviceId=None,):
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.deviceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamingServerReport_args')
    if self.deviceId is not None:
      oprot.writeFieldBegin('deviceId', TType.I64, 1)
      oprot.writeI64(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getStreamingServerReport_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getStreamingServerReport_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
