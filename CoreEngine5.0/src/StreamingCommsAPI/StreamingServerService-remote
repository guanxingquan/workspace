#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import StreamingServerService
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  i64 getServerID()'
  print '  bool setDeviceSnapshot(i64 deviceId, i32 channel, string snapshot)'
  print '   startLiveviewStreamSession(string sessionId, i64 deviceId, i32 channel, string protocolType, string mediaType, string streamProfile)'
  print '  bool stopLiveviewStreamSession(string sessionId)'
  print '   startPlaybackStreamSession(string sessionId, i64 deviceId, i32 channel, string protocolType, string mediaType, string action,  mediaFiles)'
  print '  bool stopPlaybackStreamSession(string sessionId)'
  print '  bool setSessionAccessControl(string sessionId, i64 ttl,  allowedClientIpAddresses)'
  print '   getStreamClients(string sessionId)'
  print '  string getStreamingServerReport(i64 deviceId)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = StreamingServerService.Client(protocol)
transport.open()

if cmd == 'getServerID':
  if len(args) != 0:
    print 'getServerID requires 0 args'
    sys.exit(1)
  pp.pprint(client.getServerID())

elif cmd == 'setDeviceSnapshot':
  if len(args) != 3:
    print 'setDeviceSnapshot requires 3 args'
    sys.exit(1)
  pp.pprint(client.setDeviceSnapshot(eval(args[0]),eval(args[1]),args[2],))

elif cmd == 'startLiveviewStreamSession':
  if len(args) != 6:
    print 'startLiveviewStreamSession requires 6 args'
    sys.exit(1)
  pp.pprint(client.startLiveviewStreamSession(args[0],eval(args[1]),eval(args[2]),args[3],args[4],args[5],))

elif cmd == 'stopLiveviewStreamSession':
  if len(args) != 1:
    print 'stopLiveviewStreamSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopLiveviewStreamSession(args[0],))

elif cmd == 'startPlaybackStreamSession':
  if len(args) != 7:
    print 'startPlaybackStreamSession requires 7 args'
    sys.exit(1)
  pp.pprint(client.startPlaybackStreamSession(args[0],eval(args[1]),eval(args[2]),args[3],args[4],args[5],eval(args[6]),))

elif cmd == 'stopPlaybackStreamSession':
  if len(args) != 1:
    print 'stopPlaybackStreamSession requires 1 args'
    sys.exit(1)
  pp.pprint(client.stopPlaybackStreamSession(args[0],))

elif cmd == 'setSessionAccessControl':
  if len(args) != 3:
    print 'setSessionAccessControl requires 3 args'
    sys.exit(1)
  pp.pprint(client.setSessionAccessControl(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getStreamClients':
  if len(args) != 1:
    print 'getStreamClients requires 1 args'
    sys.exit(1)
  pp.pprint(client.getStreamClients(args[0],))

elif cmd == 'getStreamingServerReport':
  if len(args) != 1:
    print 'getStreamingServerReport requires 1 args'
    sys.exit(1)
  pp.pprint(client.getStreamingServerReport(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
